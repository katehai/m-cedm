import torch

from datamodules.oformer_dataset import SwpDataset, SwpTimePredDataset
from datamodules.pl_datamodule import HDF5Datamodule


class PlOformerSwpDatamodule(HDF5Datamodule):
    def __init__(self,
                 name='h5_oform_datamodule',
                 train_path="data/train.h5",
                 val_path="data/val.h5",
                 test_path="data/test.h5",
                 return_abs_coords=True,
                 return_grid=True,
                 norm_x=True,
                 norm_t=True,
                 norm_input=True,
                 norm_target=True,
                 add_t=False,
                 flip_xy=False,
                 const_norm_stats=True,
                 use_theta=False,
                 use_tar_ic=False,
                 train_2d=False,
                 num_workers=2,
                 batch_size=32,
                 test_batch_size=None,
                 down_factor=1,
                 down_interp=True):
        super().__init__(name,
                         train_path,
                         val_path,
                         test_path,
                         return_abs_coords,
                         return_grid,
                         norm_x,
                         norm_t,
                         norm_input,
                         norm_target,
                         flip_xy,
                         const_norm_stats,
                         use_theta,
                         use_tar_ic,
                         num_workers,
                         batch_size,
                         test_batch_size,
                         down_factor,
                         down_interp)
        self.save_hyperparameters()
        self.add_t = add_t
        self.train_2d = train_2d

    def setup(self, stage=None):
        self.train_dataset = SwpDataset(
            datapath=self.train_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            train_2d=self.train_2d,
            dtype=torch.float32)

        self.val_dataset = SwpDataset(
            datapath=self.val_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            train_2d=self.train_2d,
            dtype=torch.float32,
            down_factor=self.down_factor,
            down_interp=self.down_interp)

        self.test_dataset = SwpDataset(
            datapath=self.test_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            train_2d=self.train_2d,
            dtype=torch.float32,
            down_factor=self.down_factor,
            down_interp=self.down_interp)
        return


class PlOformerSwpTimePredDatamodule(HDF5Datamodule):
    def __init__(self,
                 name='h5_oform_datamodule',
                 train_path="data/train.h5",
                 val_path="data/val.h5",
                 test_path="data/test.h5",
                 return_abs_coords=True,
                 return_grid=True,
                 norm_x=True,
                 norm_t=True,
                 norm_input=True,
                 norm_target=True,
                 add_t=False,
                 flip_xy=False,
                 const_norm_stats=True,
                 use_theta=False,
                 use_tar_ic=False,
                 num_workers=2,
                 batch_size=32,
                 test_batch_size=None,
                 down_factor=1,
                 down_interp=True,
                 n_history=64
                 ):
        super().__init__(name,
                         train_path,
                         val_path,
                         test_path,
                         return_abs_coords,
                         return_grid,
                         norm_x,
                         norm_t,
                         norm_input,
                         norm_target,
                         flip_xy,
                         const_norm_stats,
                         use_theta,
                         use_tar_ic,
                         num_workers,
                         batch_size,
                         test_batch_size,
                         down_factor,
                         down_interp)
        self.save_hyperparameters()
        self.add_t = add_t
        self.n_history = n_history

    def setup(self, stage=None):
        self.train_dataset = SwpTimePredDataset(
            datapath=self.train_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            dtype=torch.float32,
            n_history=self.n_history)

        self.val_dataset = SwpTimePredDataset(
            datapath=self.val_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            dtype=torch.float32,
            down_factor=self.down_factor,
            down_interp=self.down_interp,
            n_history=self.n_history)

        self.test_dataset = SwpTimePredDataset(
            datapath=self.test_path,
            return_abs_coords=self.return_abs_coords,
            return_grid=self.return_grid,
            input_mean=self.input_mean,
            input_std=self.input_std,
            target_mean=self.target_mean,
            target_std=self.target_std,
            norm_x=self.norm_x,
            norm_t=self.norm_t,
            norm_input=self.norm_input,
            norm_target=self.norm_target,
            add_t=self.add_t,
            flip_xy=self.flip_xy,
            use_theta=self.use_theta,
            use_tar_ic=self.use_tar_ic,
            dtype=torch.float32,
            down_factor=self.down_factor,
            down_interp=self.down_interp,
            n_history=self.n_history)
        return
